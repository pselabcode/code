clear all;
close all;

%    p q     z         hlc(adm)
z = [0 1 0.08+0.24j    0.00j
     1 2 0.02+0.06j    0.06j
     2 0 0.08+0.24j    0.00j
     2 3 0.06+0.18j    0.04j
     2 4 0.06+0.18j    0.04j
     3 4 0.01+0.03j    0.02j
     4 0 0.08+0.24j    0.00j
    ];

fb = z(:,1);
tb = z(:,2);
Z = z(:,3);
hlc = z(:,4);
y = 1./Z;

nbus = max(max(fb), max(tb))+1;
Y = zeros(nbus);
nline = length(tb);
for k = 1:nline
    p = fb(k)+1;
    q = tb(k)+1;
    Y(p,p) = Y(p,p)+y(k)+hlc(k);
    Y(q,q) = Y(q,q)+y(k)+hlc(k);
    Y(p,q) = Y(p,q)-y(k);
    Y(q,p) = Y(p,q); 
end
Ybus = Y(2:5, 2:5);

%end

clc;
clear;
%      Element  From   To    Z
data=[  1        1     0    0.52
        2        2     1    0.32
        3        3     1    0.43
        4        2     0    0.25
        5        2     3    0.21];

    element=data(:,1);
    nbr=length(data(:,1));
    from=data(:,2);
    to=data(:,3);
    zb=data(:,4);
    n=max(max(from),max(to));
    zbus=zeros(n,n);

    for i=1:nbr
        %Modification-1

        if(element(i)==1)
            zbus=zb(i)
            continue
        end

        %Modification-2

        if(from(i)~=0 && to(i)~=0)
            if(from(i)>to(i))
                k=to(i);
                new=from(i);
                for j=1:2
                    zbus(j,new)=zbus(j,k);
                    zbus(new,j)=zbus(k,j);
                end
                zbus(new,new)=zbus(k,k)+zb(i)
                continue
            end
        end
        %Modification-3

        if(to(i)==0)
            old=from(i);
            m1=zbus(old,old)+zb(i);
            ztemp=(1/m1)*zbus(:,old)*zbus(old,:);
            zbus=zbus-ztemp
            continue
        end
        %Modification-4

        if(from(i)~=0 && to(i)~=0)
            a=from(i);
            b=to(i);
            m2=zb(i)+zbus(a,a)+zbus(b,b)-(2*zbus(a,b));
            ztemp=(1/m2)*((zbus(:,a)-(zbus(:,b)))*((zbus(a,:))-(zbus(b,:))));
            zbus=zbus-ztemp
            continue
        end
    end
    fprintf('z-bus\n');
    disp(zbus);
    

% end


clc;
clear all;
L = input('Enter length of transmission line in Km');
R = input('Enter the value of resistance per unit length');
X = input('Enter the value of reactance per unit length');
Z1 = complex(R,X)
G = input('Enter the value of admittance per unit length');
Y1 = complex(0,G);
Z = L*Z1;
Y=L*Y1;
if L<80
    A=1
    B=Z
    C=0
    D=1
    
else if L>240
        Zc = sqrt(Z1/Y1);
        gamma = sqrt(Z1*Y1);
        A = cosh(gamma*L)
        B = Zc*sinh(gamma*L)
        C=(1/Zc)*sinh(gamma*L)
        D=A
    else
        model = input('Which model do you want to implement 1. T model 2. Pi model')
        if(model ==1 )
            A= 1 + Y*Z/2
            B = Z*(1 + Y*Z/4);
            C=Y
            D=A
        else
            A = 1+(Y*Z)/2
            B=Z
            C = Y*(1 + Y*Z/4);
            D=A
        end
    end
end


% end

 Vr1 = input('Enter the value of receiving end line voltage');
 p = input('Enter the receiving end power');
 pf = input('Enter the receiving end power factor');
 Vr = Vr1/1.732;
 x = sqrt(1-pf*pf);
 magIr = p/(1.732*Vr1*pf)
 Ir = complex(magIr*pf,-magIr*x);
 Vs = (A*Vr)+(B*Ir);
 Is = (C*Vr) + (D*Ir);
 % Volatage regulation
 
 Vr0 = abs(Vs/A)
 regulation = ((Vr0-Vr)/Vr)*100
 %efficiency
 input= real(3*Vs*conj(Is));
 output=real(3*Vr*conj(Ir));
 efficiency = (output/input)*100
 
 % end
 
 clc;
clear;
P=48;
 pf=0.8;
Vt=34.64;
Xd=10;
Xq=10;
Vtph=Vt*1000/sqrt(3); % Per phase Voltage
 pf_a=acos(pf);
Q=P*tan(pf_a);
I=(P-j*Q)*1000000/(3*Vtph); % Current in Amps
delta=0:1:180;
delta_rad=delta*(pi/180);
if Xd~=Xq
%Salient Pole Synchronous Motor 
Eq=Vtph+(j*I*Xq);
Id_mag=abs(I)*sin(angle(Eq)-angle(I));
Ef_mag=abs(Eq)+((Xd-Xq)*Id_mag);
Exitation_emf=Ef_mag
Reg=(Ef_mag-abs(Vtph))*100/abs(Vtph)
PP=Ef_mag*Vtph*sin(delta_rad)/Xd;
Reluct_Power=Vtph^2*(Xd-Xq)*sin(2*delta_rad)/(2*Xd*Xq);
Net_Reluct_Power=3*Reluct_Power/1000000;
Power_sal=PP+Reluct_Power;
Net_Power_sal=3*Power_sal/1000000;
plot(delta,Net_Reluct_Power,'K');
hold on
plot(delta,Net_Power_sal,'r');
xlabel('\Delta(deg)-------->');
ylabel('Three Phase Power(pu)-------->');
title('Plot:Power Angle Curve for Salient Synchronous M/c');
legend('Reluct Power','Salient Power');
end
if Xd==Xq
%Non-Salient Pole Synchronous Motor 
Ef=Vtph+(j*I*Xd);
Exitation_emf=abs(Ef)
Reg=(abs(Ef)-abs(Vtph))*100/abs(Vtph)
Power_non=abs(Ef)*Vtph*sin(delta_rad)/Xd;
Net_Power=3*Power_non/1000000;
plot(delta,Net_Power);
xlabel('\Delta(deg)-------->');
ylabel('Three Phase Power(MW)-------->');
title('Plot:Power Angle Curve for Non-Salient Synchronous M/c');
legend('Non-Salient Power');
end
grid;

% end

% critical clearing angle and critical clearing time
clc;
clear all;
x1 = 0.45 % prefault reactance;
x2 = 1.25; % during fault
x3 = 0.55; % after fault
Eg = 1.1; % Eg value
V = 1; % V value
Pe = 0.9;
f = 50;
M = 0.016;
Pm = Pe;
Pm1 = Eg*V/x1
Pm2 = Eg*V/x2
Pm3 = Eg*V/x3
d0 = asin(Pm/Pm1);
dmax = pi - asin(Pm/Pm3);
dr = ((Pm*(dmax-d0)-(Pm2*cos(d0)) + (Pm3*cos(dmax)))/(Pm3-Pm2));
dcr1 = acos(dr)
dcr = acosd(dr)
tcr = sqrt((2*M*(dcr1-d0)/(pi*f*Pm)))

% end

%GS Method
clc
clear all
n=3;
V=[1.05 1 1]; %bus voltages
Y=[20-j*50 -10+j*20 -10+j*30; -10+j*20 26-j*52 -16+j*32; -10+j*30 -16+j*32 26-j*62]  %Y Bus
P=[inf -2.566 -1.386]; 
Q=[inf -1.102 -0.452];
disp('============Output============');
iter=5;
Vprev=V;
for iter=1:5
abs(V);
abs(Vprev);
Vprev=V;
sumyv=[0 0 0 0];
for i=2:n
for k=1:n,
if(i~=k)
sumyv(i)=sumyv(i)+(Y(i,k)*V(k));
end
end
V(i)=(1/Y(i,i))*((P(i)-j*Q(i))/conj(V(i))-sumyv(i))
iter;
end
end

% end 

%Economic Load Dispatch
clc;
alpha=[400; 600; 650];
beta=[8.4; 8.93; 6.87];
gamma=[0.006; 0.0042; 0.004];
PD=820;
delp=1;
lamada=10.5;
fprintf(' ')
disp(['Lamada p1 p2 p3 Dp' .....
    'grad Delamada'])
iter=0;
while abs(delp)>=0.001
   iter=iter+1;
    p=(lamada-beta)./(2*gamma);
    delp=PD-sum(p);
    j= sum(ones(length(gamma),1)./(2*gamma));
    Delamada=delp/j;
    disp([lamada,p(1),p(2),p(3),delp,j,Delamada])
    lamada=lamada+Delamada;
end
totalcost=sum(alpha+beta.*p+gamma.*p.^2)




